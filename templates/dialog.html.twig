<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dialog</title>
    <style>
        /* General Styling */
        body {
            margin: 0;
            padding: 0;
            font-family: 'Arial', sans-serif;
            background: url('{{ asset('uploads/dialogs/' ~ dialog.image) }}') no-repeat center center fixed;
            background-size: cover;
            color: #fff;
            overflow: hidden;
        }

        .dialog-end-message {
            font-weight: bold;
            color: red;
            margin-top: 20px;
            text-align: center;
        }

        .container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            height: 100vh;
            padding: 20px;
        }

        /* Character Panels with Blur Background */
        .character-panel {
            width: 25%;
            text-align: center;
            position: relative;
        }

        .character-panel::before {
            content: '';
            position: absolute;
            top: 0;
            left: 50%;
            transform: translateX(-50%);
            width: 90%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            filter: blur(10px);
            border-radius: 15px;
            z-index: -1;
        }

        .character-panel img {
            border-radius: 50%;
            width: 150px;
            height: 150px;
            border: 4px solid #fff;
            object-fit: cover;
            margin-bottom: 10px;
        }

        .character-panel h2 {
            font-size: 20px;
            margin: 10px 0;
        }

        .character-panel .reactions {
            font-size: 16px;
            margin-top: 10px;
        }

        /* Dialog Box */
        .dialog-box {
            background: rgba(0, 0, 0, 0.8);
            border-radius: 20px;
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.6);
            text-align: center;
            display: flex;
            flex-direction: column;
            align-items: center; /* Center horizontally */
            justify-content: center; /* Center vertically */
            padding: 20px;
            border: 2px solid #ccc;
            margin: 20px auto;
            width: 80%; /* Adjust width if needed */
            max-width: 500px; /* Limit max width */
        }

        /* Scrollable Conversation */
        #conversation {
            max-height: 90vh; /* Adjust to fit the viewport */
            overflow-y: auto; /* Allow vertical scrolling */
            border-radius: 15px;
            position: relative;
            z-index: 5;
        }

        .dialog-box h1 {
            font-size: 28px;
            margin-bottom: 20px;
        }

        .dialog-box p {
            font-size: 20px;
            line-height: 1.8;
        }

        /* Answer Buttons */
        .answers {
            margin-top: 20px;
        }

        .answers button {
            background: #ffda79;
            color: #333;
            border: none;
            padding: 12px 25px;
            margin: 5px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 18px;
            transition: background 0.3s;
        }

        .answers button:hover {
            background: #ffc107;
        }

        /* Стилі для кнопки */
        .clear-history-btn {
            background-color: #f44336; /* Червоний колір фону */
            color: white; /* Білий колір тексту */
            border: none; /* Без межі */
            padding: 10px 20px; /* Відступи */
            text-align: center; /* Центрування тексту */
            text-decoration: none; /* Без підкреслення */
            display: inline-block; /* Інлайн-блок */
            font-size: 16px; /* Розмір шрифту */
            border-radius: 5px; /* Закруглені кути */
            cursor: pointer; /* Курсор у вигляді руки */
            transition: background-color 0.3s ease; /* Анімація зміни кольору фону */
        }

        .clear-history-btn:hover {
            background-color: #e53935; /* Темніший червоний колір при наведенні */
        }

        /* Стилі для посилання */
        .dialog-end-message {
            color: #1976d2; /* Синій колір тексту */
            text-decoration: none; /* Без підкреслення */
            font-size: 16px; /* Розмір шрифту */
            transition: color 0.3s ease; /* Анімація зміни кольору тексту */
        }

        .dialog-end-message:hover {
            color: #1565c0; /* Темніший синій колір при наведенні */
        }
    </style>
</head>
<body>
<div class="container">
    <!-- Main Character -->
    <div class="character-panel">
        <img src="{{ asset('uploads/images/' ~ main_character.image) }}" alt="{{ main_character.name }}">
        <h2>{{ main_character.name }}</h2>
        <p><strong>Age:</strong> {{ main_character.age }}</p>
        <p><strong>Role:</strong> {{ main_character.roleInFamily.name }}</p>
        <div class="reactions">
            <p><strong>Emoji:</strong> {{ dialog.emoji }}</p>
            <p><strong>Reactions:</strong> {{ dialog.reactions }}</p>
        </div>
    </div>

    <!-- Dialog Content -->
    <div id="conversation">
        <button onclick="clearHistory('{{ member.name | escape }}')" class="clear-history-btn" style="margin-left: 20px">Очистити Історію</button>
        <a href="/" class="dialog-end-message">Повернутися Назад</a>

        <div class="dialog-box" data-dialog-id="{{ dialog.id }}">
            <h1>{{ dialog.name }}</h1>
            <p>{{ dialog.content }}</p>
            <div class="answers">
                {% for key, answer in dialog.answers %}
                    <button onclick="handleAnswer({{ key+1 }}, {{ answer.id }}, {{ dialog.id }}, '{{ answer.content | escape }}', '{{ member.name | escape }}', '{{ member.id | escape }}')"
                            class="disable">
                        {{ answer.content }}
                    </button>
                {% endfor %}
            </div>
        </div>
    </div>

    <!-- Selected Family Member -->
    <div id="member-id" style="display: none">{{ member.id }}</div>
    <div id="member-container" class="character-panel">
        <img src="{{ asset('uploads/images/' ~ member.image) }}" alt="{{ member.name }}">
        <h2>{{ member.name }}</h2>
        <p><strong>Age:</strong> {{ member.age }}</p>
        <p><strong>Role:</strong> {{ member.roleInFamily.name }}</p>
        <div class="reactions">
            <p><strong>Emoji:</strong></p>
            <p><strong>Reactions:</strong></p>
        </div>
    </div>
</div>

<script>
    const conversationContainer = document.getElementById('conversation');
    const memberContainer = document.getElementById('member-container');
    const mainCharacterContainer = document.querySelector('.character-panel'); // Assuming the first character panel is the main character.

    function loadHistory(memberName, memberId) {
        const history = JSON.parse(localStorage.getItem('dialogHistory')) || [];

        // Check if history exists for the given member name
        console.log(memberName);
        if (history.some(dialog => dialog.memberName === memberName)) {
            let buttons = document.querySelectorAll('.disable')
            buttons.forEach(button => {
                button.disabled = true;
            });

            history.forEach(dialog => {
                if (dialog.memberName === memberName) {
                    const dialogBox = createDialogBox(dialog, memberName, memberId);
                    conversationContainer.appendChild(dialogBox);
                }
            });
        } else {
            console.log("No history for this member.");
        }
    }

    function saveDialogToHistory(dialog) {
        const history = JSON.parse(localStorage.getItem('dialogHistory')) || [];
        history.push(dialog);
        console.log(history);
        localStorage.setItem('dialogHistory', JSON.stringify(history));
    }

    function saveCharacterData(memberName, emoji, reactions, health, energy, mood, state, hunger, stress) {
      const characterData = JSON.parse(localStorage.getItem('characterData')) || {};
      characterData[memberName] = {
        emoji,
        reactions,
        health,
        energy,
        mood,
        state,
        hunger,
        stress
      };
      localStorage.setItem('characterData', JSON.stringify(characterData));
    }

    // Load character data from localStorage only if the member name exists
    function loadCharacterData(memberName) {
      const characterData = JSON.parse(localStorage.getItem('characterData')) || {};

      if (characterData[memberName]) {
        return characterData[memberName];
      }
    }

    // Handle answer selection
    function handleAnswer(position, answerId, dialogId, answerContent, memberName, memberId) {
        if (memberName && dialogId) {
            let storedData = JSON.parse(localStorage.getItem('membersData')) || {};  // Get existing data, or initialize an empty object
            storedData[memberId] = memberName;  // Store the member's name with dialog ID as key
            localStorage.setItem('membersData', JSON.stringify(storedData));  // Save updated data back to localStorage
        }
        const selectedAnswer = {
            dialogId,
            answerContent
        };

        // Save selected answer to localStorage
        let selectedAnswers = JSON.parse(localStorage.getItem('selectedAnswers')) || [];
        // Avoid adding the same answer more than once for the same dialog
        selectedAnswers = selectedAnswers.filter(ans => ans.dialogId !== dialogId);  // Remove previous answers for the dialog
        selectedAnswers.push(selectedAnswer);  // Add the new selected answer
        localStorage.setItem('selectedAnswers', JSON.stringify(selectedAnswers));

        // Remove answer buttons and replace with selected answer
        const dialogBox = document.querySelector(`[data-dialog-id="${dialogId}"]`);
        console.log(dialogBox)
        const answers = dialogBox.querySelector('.answers');
        answers.innerHTML = `<p class="selected-answer">${answerContent}</p>`;  // Replace with text

        // Fetch next dialog from the server after answering
        fetchDialog(position, answerId, dialogId, memberId);
    }

    // Fetch dialog and update the UI
    function fetchDialog(position, answerId, dialogId, memberId) {
      let memberName = JSON.parse(localStorage.getItem('membersData'))[memberId];
      fetch(`/api/dialog/${answerId}-${position}/${dialogId}`)
        .then(response => response.json())
        .then(data => {
          if (data.error) {
            alert(data.error);
            return;
          }

          // Handle dialog ending
          if (data.last) {
            const { emoji, reactions, health, energy, mood, state, hunger, stress } = data.member;
            saveCharacterData(memberName, emoji, reactions, health, energy, mood, state, hunger, stress);
            updateCharacterInfo(memberContainer, emoji, reactions, health, energy, mood, state, hunger, stress);

            const endMessage = document.createElement('p');
            endMessage.className = 'dialog-end-message';
            endMessage.innerText = 'This dialog has ended.';
            conversationContainer.appendChild(endMessage);
            return;
          }

          // Proceed with regular dialog processing
          const mainCharacterImage = mainCharacterContainer.querySelector('img');
          if (data.mainCharacter.image) mainCharacterImage.src = data.mainCharacter.image;

          const { emoji: mainEmoji, reactions: mainReactions, health: mainHealth, energy: mainEnergy, mood: mainMood, state: mainState, hunger: mainHunger, stress: mainStress } = data.mainCharacter;
          saveCharacterData('mainCharacter', mainEmoji, mainReactions, mainHealth, mainEnergy, mainMood, mainState, mainHunger, mainStress);
          updateCharacterInfo(mainCharacterContainer, mainEmoji, mainReactions, mainHealth, mainEnergy, mainMood, mainState, mainHunger, mainStress);

          const memberImage = memberContainer.querySelector('img');
          if (data.member.image) memberImage.src = data.member.image;

          const { emoji: memberEmoji, reactions: memberReactions } = data.member;
          saveCharacterData(memberName, memberEmoji, memberReactions, data.member.health, data.member.energy, data.member.mood, data.member.state, data.member.hunger, data.member.stress);
          updateCharacterInfo(memberContainer, memberEmoji, memberReactions, data.member.health, data.member.energy, data.member.mood, data.member.state, data.member.hunger, data.member.stress);

          let i = 1;
          const newDialog = {
            id: data.id,
            name: data.name,
            memberName: memberName,
            memberId: memberId,
            content: data.content,
            answers: data.answers.map(answer => ({
              content: answer.content,
              id: answer.id,
              position: i++
            }))
          };

          const dialogBox = createDialogBox(newDialog, memberName, memberId);
          conversationContainer.appendChild(dialogBox);
          saveDialogToHistory(newDialog);

          dialogBox.scrollIntoView({ behavior: 'smooth' });
        })
        .catch(error => {
          console.error('Error fetching dialog:', error);
        });
    }

    // Update character's emoji and reactions in the UI
    function updateCharacterInfo(container, emoji, reactions, health, energy, mood, state, hunger, stress) {
      const reactionsElement = container.querySelector('.reactions');
      reactionsElement.innerHTML = `
        <p><strong>Emoji:</strong> ${emoji || 'None'}</p>
        <p><strong>Reactions:</strong> ${reactions || 'None'}</p>
        <p><strong>Health:</strong> ${health}</p>
        <p><strong>Energy:</strong> ${energy}</p>
        <p><strong>Mood:</strong> ${mood}</p>
        <p><strong>State:</strong> ${state}</p>
        <p><strong>Hunger:</strong> ${hunger}</p>
        <p><strong>Stress:</strong> ${stress}</p>
    `;
    }

    // Create a dialog box element
    function createDialogBox(dialog, memberName, memberId) {
        const dialogBox = document.createElement('div');
        dialogBox.classList.add('dialog-box');
        dialogBox.dataset.dialogId = dialog.id;  // Adding dialog id for tracking

        // Check if any answer is selected for this dialog
        const selectedAnswer = dialog.answers.find(answer => checkSelectedAnswer(dialog.id, answer.content));

        dialogBox.innerHTML = `
    <h1>${dialog.name}</h1>
    <p>${dialog.content}</p>
    <div class="answers">
      ${selectedAnswer ?  // If any answer is selected, show it as text
            `<p class="selected-answer">${selectedAnswer.content}</p>` :
            dialog.answers.map(answer => {
                return `<button onclick="handleAnswer(${answer.position}, ${answer.id}, ${dialog.id}, '${answer.content}', '${memberName}', ${memberId})">${answer.content}</button>`;
            }).join('')
        }
    </div>
  `;

        return dialogBox;
    }

    // Check if the answer was previously selected
    function checkSelectedAnswer(dialogId, answerContent) {
        const selectedAnswers = JSON.parse(localStorage.getItem('selectedAnswers')) || [];
        console.log(dialogId, answerContent, selectedAnswers);
        return selectedAnswers.some(ans => answerContent.includes(ans.answerContent));
    }

    // Clear dialog history from localStorage
    function clearHistory() {
        localStorage.removeItem('dialogHistory');
        localStorage.removeItem('selectedAnswers');
        localStorage.removeItem('characterData');
        localStorage.removeItem('membersData');
        localStorage.removeItem('backgroundImage');

        location.reload();
    }

    document.addEventListener('DOMContentLoaded', () => {
        const memberName = document.querySelector('#member-container h2').innerText;  // Get the member's name dynamically
        const memberId = document.querySelector('#member-id').innerText;  // Get the member's name dynamically

        // Load conversation history only for the selected member
        loadHistory(memberName, memberId);

        // Load character data for the selected member
        const memberData = loadCharacterData(memberName, memberId);
        updateCharacterInfo(memberContainer, memberData.emoji, memberData.reactions);

        const mainCharacterData = loadCharacterData('mainCharacter');
        updateCharacterInfo(mainCharacterContainer, mainCharacterData.emoji, mainCharacterData.reactions);
    });
</script>

</body>
</html>
